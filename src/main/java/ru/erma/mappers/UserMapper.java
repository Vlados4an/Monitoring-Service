package ru.erma.mappers;

import org.mapstruct.Context;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.springframework.security.crypto.password.PasswordEncoder;
import ru.erma.dto.SecurityDTO;
import ru.erma.model.Role;
import ru.erma.model.UserEntity;

@Mapper(componentModel = "spring")
public interface UserMapper {
    /**
     * This method is used to map from a SecurityDTO to a User entity.
     * The implementation of this method is generated by MapStruct.
     *
     * @param securityDTO the SecurityDTO to be mapped to a User entity
     * @return the User entity mapped from the SecurityDTO
     */
    @Mapping(target = "password", source = "password", qualifiedByName = "hashPassword")
    @Mapping(target = "role" , expression = "java(defaultRole().name())")
    UserEntity toUserEntity(SecurityDTO securityDTO, @Context PasswordEncoder passwordEncoder);

    /**
     * This method is used to hash a password using the PasswordHasher utility.
     * It is named "hashPassword" so it can be referenced in the @Mapping annotation in the toUser method.
     *
     * @param password the password to be hashed
     * @return the hashed password as a byte array
     */
    @Named("hashPassword")
    default String hashPassword(String password, @Context PasswordEncoder passwordEncoder) {
        return passwordEncoder.encode(password);
    }

    default Role defaultRole() {
        return Role.USER;
    }
}
